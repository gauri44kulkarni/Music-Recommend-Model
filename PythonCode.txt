import pandas as pd
df = pd.read_csv("./vgsales.csv")
df.shape
df.describe()
df.values

___________________________________________

//Calculating accuracy of model

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

music_data = pd.read_csv('music.csv')
x = music_data.drop(columns=['genre'])
y = music_data['genre']
#tosplit dataset into training and testing datasets and size of datasets want to dedicate for testing
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2)

#DecisionTree Algo, fit(input_dataset,Output_dataset)
model = DecisionTreeClassifier()
model.fit(x_train,y_train)
predictions=model.predict(x_test)

# for comparing train_test_dataset (x_test) with actual testing dataset(y_test)
score = accuracy_score(y_test, predictions)
score
_____________________________________________________________

//Persist and load model
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
#joblib has methoads for saving loading models
from sklearn.externals import joblib

# music_data = pd.read_csv('music.csv')
# x = music_data.drop(columns=['genre'])
# y = music_data['genre']

# model = DecisionTreeClassifier()
# model.fit(x,y)

#function -> model and name of the file
#joblib.dump(model,'music-recommender.joblib')

#joblib.load -> to load the model
joblib.load('music-recommender.joblib')
predictions=model.predict([[21,1]])
predictions

_______________________________________________________________________________________________________________

//Visualizing a decision tree
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
#for drawing tree structure in vs code - visualizing a tree
from sklearn import tree

music_data = pd.read_csv('music.csv')
x = music_data.drop(columns=['genre'])
y = music_data['genre']

model = DecisionTreeClassifier()
model.fit(x,y)

#attributes set for graph in vs code
tree.export_graphviz(model, out_file='music_recommender.dot',feature_names=['age','gender']
                     ,class_names=sorted(y.unique()),
                     label='all',
                     rounded=True,
                     filled=True)
					 
___________________________________________________________________________________________________________________


